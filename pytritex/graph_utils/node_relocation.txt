# Traveling salesman heuristic for Hi-C mapping construction
node_relocation<-function(df, el, maxiter=100, verbose=T){
 i<-0
 if(nrow(df) > 2){
  while({
   i<-i+1
   df[order(bin)]->df
   x<-data.table(old_node1=df[1:(nrow(df)-2)]$cluster, cluster=df[2:(nrow(df)-1)]$cluster, old_node2=df[3:nrow(df)]$cluster)
   setkeyv(el[, .(cluster1, cluster2, weight)], c("cluster1", "cluster2"))->ee
   setnames(setnames(ee, c("cluster1", "cluster2"), c("old_node1", "old_node2"))[setkeyv(x, c("old_node1", "old_node2"))], "weight", "new_edge3")->x
   setnames(setnames(ee, c("old_node1", "old_node2"), c("cluster", "old_node1"))[setkeyv(x, c("cluster", "old_node1"))], "weight", "old_edge1")->x
   setnames(setnames(ee, "old_node1", "old_node2")[setkeyv(x, c("cluster", "old_node2"))], "weight", "old_edge2")->x
   x[!is.na(new_edge3) ]->x

   setkey(el[, .(cluster1, cluster2)], "cluster2")[setkey(copy(df), "cluster")][order(cluster1, bin)]->t
   which(t[, dist:={if(.N == 1) {as.integer(NA)} else { as.integer(c(bin[2:.N],NA)-bin)}}, by=cluster1]$dist == 1)->idx

   data.table(cluster=t$cluster1[idx], new_node1=t$cluster2[idx], new_node2=t$cluster2[idx+1])->t
   setkeyv(el[, .(cluster1, cluster2, weight)], c("cluster1", "cluster2"))->ee
   setnames(setnames(ee, c("cluster1", "cluster2"), c("cluster", "new_node1"))[setkeyv(t, c("cluster", "new_node1"))], "weight", "new_edge1")->t
   setnames(setnames(ee, "new_node1", "new_node2")[setkeyv(t, c("cluster", "new_node2"))], "weight", "new_edge2")->t
   setnames(setnames(ee, c("cluster", "new_node2"), c("new_node1", "new_node2"))[setkeyv(t, c("new_node1", "new_node2"))], "weight", "old_edge3")->t
   setkey(x, "cluster")[setkey(t, "cluster")][!is.na(old_node1)]->m
   m[ ,diff := new_edge1+new_edge2+new_edge3 - old_edge1 - old_edge2 - old_edge3]
   nrow(m<-m[diff < 0][order(diff)]) > 0 & i <= maxiter
   }) {
   ne<-head(data.frame(m), 1)
   idx<-data.frame(cluster=df$cluster, idx=1:nrow(df))
   # Get the other columns for this row
   invisible(
     lapply(
       c("cluster", "new_node1", "new_node2", "old_node1", "old_node2"),
       function(i) {
             merge(ne, by.x=i, by.y="cluster", idx)->>ne
             colnames(ne)[which(colnames(ne) == "idx")]<<-paste(sep="_", "idx", i)
   }))

   # Get the indices to reorder / subset the data frame
   df[with(ne, {
    min_new <- min(idx_new_node1, idx_new_node2)
    max_new <- max(idx_new_node1, idx_new_node2)
    min_old <- min(idx_old_node1, idx_old_node2)
    max_old <- max(idx_old_node1, idx_old_node2)
    if(min_old < min_new) {
     c(1:min_old, max_old:min_new, idx_cluster, max_new:nrow(df))
    } else {
     c(1:min_new, idx_cluster, max_new:min_old, max_old:nrow(df))
    }
   }),]->df
   df$bin<-1:nrow(df)
   df<-data.table(df)
  }
  if(verbose){
   cat(paste0("Node relocation steps: ", i-1, "\n"))
  }
 }
 df
}